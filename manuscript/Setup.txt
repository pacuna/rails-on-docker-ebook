# Setting up the project

This is not a book about Ruby on Rails development, so we are not going to
build something from scratch. Instead, we're going to deploy a sample application
from the [elasticsearch-rails gem repository](https://github.com/elastic/elasticsearch-rails/tree/master/elasticsearch-rails).
This application is an example of how to integrate Elasticsearch with Ruby on Rails.

Our final application will look like this:

![Complete Web Application](images/complete-app.png)

We're basically deploying a faceted browser for articles from the New York Times.
These articles are seeded into the database and indexed into an Elasticsearch cluster.
It also comes with a worker that sends jobs to a Sidekiq queue using redis.
Finally, I've added a cache storage to the application using memcached just for making it
even more realistic.

This application is distributed through several Rails templates available in the official repository of the gem.
I just made some small modifications in order to dockerize the application and also pushed the 
final result to a public repository under my GitHub account.
We will use [Vagrant](https://www.vagrantup.com/) for creating an environment ready for
running the dockerized application. This way you don't have to install anything except Vagrant and
its dependencies on your local machine.

If you don't have Vagrant installed, go to the [download page](https://www.vagrantup.com/downloads.html)
and download the proper package for your system. You're also going to need a
virtualization software such as [VirtualBox](https://www.vagrantup.com/downloads.html).

## Getting the source code

First, clone the final application repository:

    git clone git@github.com:pacuna/searchapp.git

This repository contains all the necessary files for testing the application locally and
for deploying it with Amazon ECS.

We also need a DockerHub account for hosting the Docker image for our project.
If you don't have an account, go to the [DockerHub](https://hub.docker.com/) sign up page
and fill out the form with your information. 

Once you have your DockerHub account ready, create a new public repository and name it
`searchapp`. We are going to push our container images to that repository in order
to pull them from ECS.

Finally, you'll need the AWS CLI tool for accessing the Amazon AWS api.
For setup instructions, visit [this link](https://aws.amazon.com/cli/)

Once you installed this tool, you can configure it to use your credentials by running

    $ aws configure


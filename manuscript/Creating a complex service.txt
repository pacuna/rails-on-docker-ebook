# Creating a complex service

The simple service created in the previous section was enough for catching
the essentials of the workflow in ECS. You create your task definition,
and a service that runs a task that uses that task definition. When you don't 
need the task to be running anymore, you just update the desired-count of tasks
for the service to zero, and finally remove the service.

Now, let's create a service connected to the ELB. In this case we are going to
need a json file with the definition of the service. This is a good thing since now
we can add our tasks definitions and our services definitions to our version control system.
We're also going to need a new IAM Role, since this kind of service requires more interaction
with other resources, especially with the EC2 instances and the ELBs. We can use this
same Role for the other services that we need to create later.

Use the file `deploy/AmazonEC2ContainerServiceRole-Trust-Policy.json` for the trust
policy for this role:

    $ aws iam create-role --role-name ecsServiceRole --assume-role-policy-document file://policies/AmazonEC2ContainerServiceRole-Trust-Policy.json

Output:

    {
	"Role": {
	    "AssumeRolePolicyDocument": {
		"Version": "2012-10-17",
		"Statement": {
		    "Action": "sts:AssumeRole",
		    "Effect": "Allow",
		    "Principal": {
			"Service": "ecs.amazonaws.com"
		    }
		}
	    },
	    "RoleId": "AROAI4JOLLGSAZ7PJWZKA",
	    "CreateDate": "2015-10-10T03:49:23.138Z",
	    "RoleName": "ecsServiceRole",
	    "Path": "/",
	    "Arn": "arn:aws:iam::387705308362:role/ecsServiceRole"
	}
    }

And attach the `AmazonEC2ContainerServiceRole` native Amazon policy to this Role:

    $ aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole --role-name ecsServiceRole

Now that we have the Role, the json for the service should look like this (deploy/services/mysql-service.json):

    {
	"serviceName": "mysql-service",
	    "taskDefinition": "searchapp-db:1",
	    "loadBalancers": [
	    {
		"loadBalancerName": "mysql-elb",
		"containerName": "searchapp-db",
		"containerPort": 3306 
	    }
	    ],
		"desiredCount": 1,
		"role": "ecsServiceRole"
    }

And we can create the service using this file as an argument for the `create-service` 
command:

    $ aws ecs create-service --cluster searchapp --service-name mysql-service --cli-input-json file://services/mysql-service.json

Output:

    {
	"service": {
	    "status": "ACTIVE",
	    "taskDefinition": "arn:aws:ecs:us-east-1:387705308362:task-definition/searchapp-db:1",
	    "pendingCount": 0,
	    "loadBalancers": [
		{
		    "containerName": "searchapp-db",
		    "containerPort": 3306,
		    "loadBalancerName": "mysql-elb"
		}
	    ],
	    "roleArn": "arn:aws:iam::387705308362:role/ecsServiceRole",
	    "desiredCount": 1,
	    "serviceName": "mysql-service",
	    "clusterArn": "arn:aws:ecs:us-east-1:387705308362:cluster/searchapp",
	    "serviceArn": "arn:aws:ecs:us-east-1:387705308362:service/mysql-service",
	    "deployments": [
		{
		    "status": "PRIMARY",
		    "pendingCount": 0,
		    "createdAt": 1444451891.317,
		    "desiredCount": 1,
		    "taskDefinition": "arn:aws:ecs:us-east-1:387705308362:task-definition/searchapp-db:1",
		    "updatedAt": 1444451891.317,
		    "id": "ecs-svc/9223370592402884475",
		    "runningCount": 0
		},
		{
		    "status": "ACTIVE",
		    "pendingCount": 0,
		    "createdAt": 1444449447.38,
		    "desiredCount": 0,
		    "taskDefinition": "arn:aws:ecs:us-east-1:387705308362:task-definition/searchapp-db:1",
		    "updatedAt": 1444451661.788,
		    "id": "ecs-svc/9223370592405328421",
		    "runningCount": 0
		}
	    ],
	    "events": [],
	    "runningCount": 0
	}
    }

Wait for a minute and then describe the service using its Arn (obtained using the `list-services` command), 
we'll get:

    $ aws ecs describe-services --cluster searchapp --services arn:aws:ecs:us-east-1:387705308362:service/mysql-service


    {
	"services": [
	    {
		"status": "ACTIVE",
		"taskDefinition": "arn:aws:ecs:us-east-1:387705308362:task-definition/searchapp-db:1",
		"pendingCount": 0,
		"loadBalancers": [
		    {
			"containerName": "searchapp-db",
			"containerPort": 3306,
			"loadBalancerName": "mysql-elb"
		    }
		],
		"roleArn": "arn:aws:iam::387705308362:role/ecsServiceRole",
		"desiredCount": 1,
		"serviceName": "mysql-service",
		"clusterArn": "arn:aws:ecs:us-east-1:387705308362:cluster/searchapp",
		"serviceArn": "arn:aws:ecs:us-east-1:387705308362:service/mysql-service",
		"deployments": [
		    {
			"status": "PRIMARY",
			"pendingCount": 0,
			"createdAt": 1444451891.317,
			"desiredCount": 1,
			"taskDefinition": "arn:aws:ecs:us-east-1:387705308362:task-definition/searchapp-db:1",
			"updatedAt": 1444451891.317,
			"id": "ecs-svc/9223370592402884475",
			"runningCount": 1
		    }
		],
		"events": [
		    {
			"message": "(service mysql-service) registered 1 instances in (elb mysql-elb)",
			"id": "171d065e-80ef-4aef-ab59-f8da4e3eab8a",
			"createdAt": 1444451918.439
		    },
		    {
			"message": "(service mysql-service) deregistered 1 instances in (elb mysql-elb)",
			"id": "36b9bcee-d80c-476d-bc5e-e396201ca38e",
			"createdAt": 1444451912.185
		    },
		    {
			"message": "(service mysql-service) has started 1 tasks: (task 78120397-b542-44ce-903c-4b14549a7314).",
			"id": "465fc2bf-5a4a-4965-b490-c0ddd2316467",
			"createdAt": 1444451912.185
		    }
		],
		"runningCount": 1
	    }
	],
	"failures": []
    }

Now there's an event with the message `(service mysql-service) registered 1 instances in (elb mysql-elb)`
which means our MySQL service should now be available using the ELB DNS name. 
Let's get the ELB DNS and then try to connect to the MySQL service from inside
one of our instances:

    $ aws elb describe-load-balancers

Output:

    {
	"LoadBalancerDescriptions": [
	    {
		"Subnets": [
		    "subnet-39706b4e"
		],
		"CanonicalHostedZoneNameID": "Z3DZXE0Q79N41H",
		"VPCId": "vpc-120cd476",
		"ListenerDescriptions": [
		    {
			"Listener": {
			    "InstancePort": 3306,
			    "LoadBalancerPort": 80,
			    "Protocol": "TCP",
			    "InstanceProtocol": "TCP"
			},
			"PolicyNames": []
		    }
		],
		"HealthCheck": {
		    "HealthyThreshold": 10,
		    "Interval": 30,
		    "Target": "TCP:3306",
		    "Timeout": 5,
		    "UnhealthyThreshold": 2
		},
		"BackendServerDescriptions": [],
		"Instances": [
		    {
			"InstanceId": "i-8372af57"
		    }
		],
		"DNSName": "internal-mysql-elb-1700927984.us-east-1.elb.amazonaws.com",
		"SecurityGroups": [
		    "sg-c70ff2a1"
		],
		"Policies": {
		    "LBCookieStickinessPolicies": [],
		    "AppCookieStickinessPolicies": [],
		    "OtherPolicies": []
		},
		"LoadBalancerName": "mysql-elb",
		"CreatedTime": "2015-10-10T04:36:34.930Z",
		"AvailabilityZones": [
		    "us-east-1d"
		],
		"Scheme": "internal",
		"SourceSecurityGroup": {
		    "OwnerAlias": "387705308362",
		    "GroupName": "default"
		}
	    }
	]
    }

As you can see from this output, the DNS for this load balancer is `internal-mysql-elb-1700927984.us-east-1.elb.amazonaws.com`
and it has one instance attached.

Let's connect to the same instance as before but this time let's try using the ELB DNS
for connecting to the MySQL server. This time using the port 80:

    $ ssh -i ~/.ssh/keys/ClusterKeyPair.pem ec2-user@ec2-52-23-203-99.compute-1.amazonaws.com

       __|  __|  __|
       _|  (   \__ \   Amazon ECS-Optimized Amazon Linux AMI 2015.03.g
     ____|\___|____/

    For documentation visit, http://aws.amazon.com/documentation/ecs
    No packages needed for security; 1 packages available
    Run "sudo yum update" to apply all updates.
    Amazon Linux version 2015.09 is available.
    -bash: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8): No such file or directory

    $ mysql -h internal-mysql-elb-1700927984.us-east-1.elb.amazonaws.com -P 80 -usearchappusr -pmysecretpassword

    Welcome to the MySQL monitor.  Commands end with ; or \g.
    Your MySQL connection id is 7
    Server version: 5.7.8-rc MySQL Community Server (GPL)

    Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.

    Oracle is a registered trademark of Oracle Corporation and/or its
    affiliates. Other names may be trademarks of their respective
    owners.

    Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

    mysql>

Great! We have our first service in place using our internal load balancer.

For the rest of the tasks, the setup will be pretty similar, we have to register
the task definitions, create a load balancer for each one, and launch a service
attached to that load balancer. Once we have all of our dependencies running
in their services, we can launch our main application and connect it to those
services.

# Creating a simple service

Now that we know our task definition works properly, let's create
a service for managing the task. 
This service will be running behind the ELB we created previously.

If you list your current services you'll get an empty array as response:

    $ aws ecs list-services --cluster searchapp

Output:

    {
	"serviceArns": []
    }

Let's create one for the MySQL task:

    $ aws ecs create-service --cluster searchapp --service-name mysql-service --task-definition searchapp-db:1 --desired-count 1

Output:

    {
	"service": {
	    "status": "ACTIVE",
	    "taskDefinition": "arn:aws:ecs:us-east-1:387705308362:task-definition/searchapp-db:1",
	    "pendingCount": 0,
	    "loadBalancers": [],
	    "desiredCount": 1,
	    "serviceName": "mysql-service",
	    "clusterArn": "arn:aws:ecs:us-east-1:387705308362:cluster/searchapp",
	    "serviceArn": "arn:aws:ecs:us-east-1:387705308362:service/mysql-service",
	    "deployments": [
		{
		    "status": "PRIMARY",
		    "pendingCount": 0,
		    "createdAt": 1444447207.569,
		    "desiredCount": 1,
		    "taskDefinition": "arn:aws:ecs:us-east-1:387705308362:task-definition/searchapp-db:1",
		    "updatedAt": 1444447207.569,
		    "id": "ecs-svc/9223370592407568238",
		    "runningCount": 0
		}
	    ],
	    "events": [],
	    "runningCount": 0
	}
    }

The `create-service` command needs the names of the cluster, service and the
task definition with its revision number, and the desired 
number of tasks the service should run. If you choose to run more than one task, 
the tasks will be allocated in more than one instance, which in our case makes 
sense, since the task uses a fixed port on the instance (3306), so it's not
possible to have more than one on one instance.

You can let ECS to pick a random port for your task, but then you wouldn't be
able to create a service attached to an ELB, since the ELB needs a static port
for the listener configuration. This is a feature a lot of people are waiting 
to be implemented.

If you list your services again, you'll see the service we just created:

    $ aws ecs list-services --cluster searchapp

    {
	"serviceArns": [
	    "arn:aws:ecs:us-east-1:387705308362:service/mysql-service"
	]
    }

You can run the `describe-services` command if you need more information about
some specific service. The only parameters you need are the names of the cluster
and the service:

    $ aws ecs describe-services --cluster searchapp --services mysql-service

    {
	"services": [
	    {
		"status": "ACTIVE",
		"taskDefinition": "arn:aws:ecs:us-east-1:387705308362:task-definition/searchapp-db:1",
		"pendingCount": 0,
		"loadBalancers": [],
		"desiredCount": 1,
		"serviceName": "mysql-service",
		"clusterArn": "arn:aws:ecs:us-east-1:387705308362:cluster/searchapp",
		"serviceArn": "arn:aws:ecs:us-east-1:387705308362:service/mysql-service",
		"deployments": [
		    {
			"status": "PRIMARY",
			"pendingCount": 0,
			"createdAt": 1444447207.569,
			"desiredCount": 1,
			"taskDefinition": "arn:aws:ecs:us-east-1:387705308362:task-definition/searchapp-db:1",
			"updatedAt": 1444447207.569,
			"id": "ecs-svc/9223370592407568238",
			"runningCount": 1
		    }
		],
		"events": [
		    {
			"message": "(service mysql-service) has reached a steady state.",
			"id": "13307911-f01a-44aa-bf79-b71ed2a9ca12",
			"createdAt": 1444447226.492
		    },
		    {
			"message": "(service mysql-service) has started 1 tasks: (task 8e710989-3ae2-40c5-a60b-258c12fbff47).",
			"id": "08814d81-e268-4b5e-ad31-3c9cdd9658ab",
			"createdAt": 1444447222.411
		    }
		],
		"runningCount": 1
	    }
	],
	"failures": []
    }

It's good to be familiarized with this kind of output. Later it's going to be
very useful for troubleshooting issues related to the service. 
The events section of the output tells us about the current state of the service and can display
possible errors during the launch. We'll talk more about debugging issues in the last
chapter of the book.

In our case, the service has started and has reached a steady state, which means
there are no issues.

This is the most basic kind of service. Right now we need our service to
be attached to the MySQL server ELB, so let's remove this test service. 

For removing a service, first we have to update the desired count of tasks to zero:

    $ aws ecs update-service --cluster searchapp --service mysql-service --desired-count 0

Output

    {
	"service": {
	    "status": "ACTIVE",
	    "taskDefinition": "arn:aws:ecs:us-east-1:387705308362:task-definition/searchapp-db:1",
	    "pendingCount": 0,
	    "loadBalancers": [],
	    "desiredCount": 0,
	    "serviceName": "mysql-service",
	    "clusterArn": "arn:aws:ecs:us-east-1:387705308362:cluster/searchapp",
	    "serviceArn": "arn:aws:ecs:us-east-1:387705308362:service/mysql-service",
	    "deployments": [
		{
		    "status": "PRIMARY",
		    "pendingCount": 0,
		    "createdAt": 1444447207.569,
		    "desiredCount": 0,
		    "taskDefinition": "arn:aws:ecs:us-east-1:387705308362:task-definition/searchapp-db:1",
		    "updatedAt": 1444447207.569,
		    "id": "ecs-svc/9223370592407568238",
		    "runningCount": 1
		}
	    ],
	    "events": [
		{
		    "message": "(service mysql-service) has reached a steady state.",
		    "id": "13307911-f01a-44aa-bf79-b71ed2a9ca12",
		    "createdAt": 1444447226.492
		},
		{
		    "message": "(service mysql-service) has started 1 tasks: (task 8e710989-3ae2-40c5-a60b-258c12fbff47).",
		    "id": "08814d81-e268-4b5e-ad31-3c9cdd9658ab",
		    "createdAt": 1444447222.411
		}
	    ],
	    "runningCount": 1
	}
    }

After a minute, there will be no tasks running in the cluster. Now we can delete the service:

    $ aws ecs delete-service --cluster searchapp --service mysql-service

Output:

    {
	"service": {
	    "status": "DRAINING",
	    "taskDefinition": "arn:aws:ecs:us-east-1:387705308362:task-definition/searchapp-db:1",
	    "pendingCount": 0,
	    "loadBalancers": [],
	    "desiredCount": 0,
	    "serviceName": "mysql-service",
	    "clusterArn": "arn:aws:ecs:us-east-1:387705308362:cluster/searchapp",
	    "serviceArn": "arn:aws:ecs:us-east-1:387705308362:service/mysql-service",
	    "deployments": [
		{
		    "status": "PRIMARY",
		    "pendingCount": 0,
		    "createdAt": 1444447207.569,
		    "desiredCount": 0,
		    "taskDefinition": "arn:aws:ecs:us-east-1:387705308362:task-definition/searchapp-db:1",
		    "updatedAt": 1444447949.667,
		    "id": "ecs-svc/9223370592407568238",
		    "runningCount": 0
		}
	    ],
	    "events": [
		{
		    "message": "(service mysql-service) has reached a steady state.",
		    "id": "258def28-8811-4b4d-a007-e15faba24618",
		    "createdAt": 1444447968.859
		},
		{
		    "message": "(service mysql-service) stopped 1 running tasks.",
		    "id": "09237224-5800-4a96-ad48-fc078e216cde",
		    "createdAt": 1444447965.169
		},
		{
		    "message": "(service mysql-service) has reached a steady state.",
		    "id": "13307911-f01a-44aa-bf79-b71ed2a9ca12",
		    "createdAt": 1444447226.492
		},
		{
		    "message": "(service mysql-service) has started 1 tasks: (task 8e710989-3ae2-40c5-a60b-258c12fbff47).",
		    "id": "08814d81-e268-4b5e-ad31-3c9cdd9658ab",
		    "createdAt": 1444447222.411
		}
	    ],
	    "runningCount": 0
	}
    }

The status of the service has changed to draining, which means that is going
to be removed from the cluster.

For creating a service using the Web Console, go to the ECS Panel, click on Task
Definitions in the left sidebar, and in the actions field, select "Create Service":

![Run Service](images/ui/create-service.png)

In the Create Service form, add a name for your service and choose 1 in the
Number of tasks. Then click on create service:

![Run Service](images/ui/create-service-2.png)

And that's it. If you navigate to your Cluster panel, you'll see
your service running:

![Services](images/ui/services-running.png)

For deleting the service, select the service and click on update.
Update the number of tasks to 0, wait for a minute and the click
on Delete Service.

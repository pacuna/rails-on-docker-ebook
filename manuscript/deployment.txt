# Deployment

## Introduction

## Setting up the cluster

### Creating the cluster

We can create the cluster using one simple command. The only parameter
that we need is the cluster name.

{linenos=off}
	aws ecs create-cluster --cluster-name "searchapp"

Output:

{linenos=off}
	{
	    "cluster": {
		"status": "ACTIVE",
		"clusterName": "searchapp",
		"registeredContainerInstancesCount": 0,
		"pendingTasksCount": 0,
		"runningTasksCount": 0,
		"activeServicesCount": 0,
		"clusterArn": "arn:aws:ecs:us-east-1:387705308362:cluster/searchapp"
	    }
	}

The cluster was created successfully, it has zero EC2 container
instances registered, zero task running and no services.

The idea behind the ECS cluster is that you can forget about where and how you're
task and services will be deployed. You just have to launch them and Amazon
will take care of assigning the service or task to an instance. The only thing
that we have to take care for now is adding some EC2 instances to the cluster.

### Launching the EC2 instances

Now that we have our cluster, we can launch some instances and register them
in our cluster. For launching the instances we'll need:

- A Key Pair for ssh access
- A Security Group

Let's create our key pair:

{linenos=off}
	aws ec2 create-key-pair --key-name keys_cluster

Output:

{linenos=off}
	{
	    "KeyMaterial": "-----BEGIN RSA PRIVATE KEY-----\nTHEPRIVATEKEY==\n-----END RSA PRIVATE KEY-----",
	    "KeyName": "keys_cluster",
	    "KeyFingerprint": "69:90:35:93:a8:db:fe:d0:77:00:82:35:b6:84:2a:98:6d:43:30:b5"
	}

Create a file named key_cluster.pem and paste the entire key (the value of the KeyMaterial key).
Don't forget the lines:

{linenos=off}
	"----BEGIN RSA PRIVATE KEY----"
	"-----END RSA PRIVATE KEY-----" 

Now set the permissions of the file:

{linenos=off}
	$ chmod 400 cluster.pem

Now move the file to your ssh keys directory or some place safe. Remember
that with just this file you'll be able to ssh into your cluster instances.

Now, let's create the security group. The rules for this security group
are going to restrict and allow access to our cluster instances.

Some time ago Amazon released their VPC technology and now you'll probably
have a default vpc. We're going to need the id of the vpc in order to create
resources inside of if.

The command for getting your default VPC attributes is:

{linenos=off}
	aws ec2 describe-vpcs

Output:

{linenos=off}
	{
	    "Vpcs": [
		{
		    "VpcId": "vpc-120cd476",
		    "InstanceTenancy": "default",
		    "State": "available",
		    "DhcpOptionsId": "dopt-5bf9023e",
		    "CidrBlock": "172.31.0.0/16",
		    "IsDefault": true
		}
	    ]
	}

As you can see my vpc id is vpc-120cd476 and the IsDefault key has the value
true so it's my default vpc.

Now that we have this info, let's create the security group. Just replace the 
vpc-id parameter with yours.

{linenos=off}
	aws ec2 create-security-group --group-name cluster-sg --description "Searchapp cluster security group" --vpc-id vpc-120cd476

Output:

{linenos=off}
	{
	    "GroupId": "sg-1b0af77d"
	}

And now let's add authorization for ssh access. Replace the group-id with the id
returned in the previous command, and the cidr with your vpc cidr (output from describe-vpcs):

{linenos=off}
	aws ec2 authorize-security-group-ingress --group-id sg-1b0af77d --protocol tcp --port 22 --cidr 172.31.0.0/16

This command doesn't produce any output.

